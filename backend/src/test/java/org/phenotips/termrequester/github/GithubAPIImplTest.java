/*
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/
 */
package org.phenotips.termrequester.github;

import java.io.IOException;
import java.io.InputStream;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.http.client.fluent.Request;
import org.apache.http.entity.ContentType;

import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import org.phenotips.termrequester.Phenotype;
import org.phenotips.termrequester.di.HPORequestModule;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import com.google.inject.Injector;
import com.google.inject.Guice;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

/**
 * Tests the GithubAPIImpl class.
 *
 * @version $Id$
 */
public class GithubAPIImplTest
{
    /**
     * The github user whose repo we're gonna hit.
     */
    private static final String USER = "josecv";

    /**
     * The github repo to hit.
     */
    private static final String REPO = "Sandbox";

    /**
     * The OAuth Token we're using for auth.
     */
    private static final String TEST_TOKEN = "d7768d2daa184cac2b1ea1d99978a330e8deccaa";

    /**
     * The guice injector to use.
     */
    private static Injector injector;

    /**
     * An object mapper to deserialize from json.
     */
    private static ObjectMapper mapper;

    /**
     * The factory to build clients.
     */
    private static GithubAPIFactory factory;

    /**
     * The client under test.
     */
    private GithubAPI client;

    /**
     * A test phenotype.
     */
    private Phenotype pt;

    /**
     * The issues to cleanup at the end.
     */
    private List<String> cleanupIssues;

    /**
     * Set up the suite.
     */
    @BeforeClass
    public static void beforeClass()
    {
        injector = Guice.createInjector(new HPORequestModule());
        mapper = injector.getInstance(ObjectMapper.class);
        factory = injector.getInstance(GithubAPIFactory.class);
    }

    /**
     * Set up the test.
     */
    @Before
    public void setUp() throws IOException
    {
        client = factory.create(new GithubAPI.Repository(USER, REPO, TEST_TOKEN));
        pt = new Phenotype();
        pt.setName("unittest");
        pt.setDescription("Issue autogenerated by unit test in org.phenotips.termrequester.github.GithubAPIImplTest");
        pt.setId("id");
        pt.addSynonym("one");
        pt.addSynonym("two");
        cleanupIssues = new ArrayList<>();
    }

    /**
     * Tear down the test, closing any issues we opened.
     */
    @After
    public void tearDown() throws IOException
    {
        for (String issue : cleanupIssues) {
            closeIssue(issue);
        }
    }

    /**
     * Close the issue with the number given.
     * @param number the number
     */
    private void closeIssue(String number) throws IOException
    {
        String endpoint = String.format("https://api.github.com/repos/%s/%s/issues/%s", USER, REPO, number);
        Map<String, String> params = new HashMap<>();
        params.put("state", "closed");
        params.put("title", "Unit testing auto-opened issue");
        byte[] bytes = mapper.writeValueAsBytes(params);
        Request.Patch(endpoint).bodyByteArray(bytes, ContentType.APPLICATION_JSON).
            addHeader("Authorization", "token " + TEST_TOKEN).
            execute().returnContent();
    }

    /**
     * Test that a new issue can be created for a simple phenotype.
     */
    @Test
    public void testOpenIssue() throws IOException
    {
        String expectedDescription = pt.issueDescribe();
        client.openIssue(pt);
        String number = pt.getIssueNumber();
        assertNotNull(number);
        cleanupIssues.add(number);
        String endpoint = String.format("https://api.github.com/repos/%s/%s/issues/%s", USER, REPO, number);
        InputStream is = Request.Get(endpoint).execute().returnContent().asStream();
        DataTypes.Issue issue = mapper.readValue(is, DataTypes.Issue.class);
        assertEquals(expectedDescription, issue.body);
        assertEquals("open", issue.state);
    }

    /**
     * Test that the hasIssue method works.
     */
    @Test
    public void testHasIssue() throws IOException, InterruptedException
    {
        assertEquals(false, client.hasIssue(pt));
        client.openIssue(pt);
        cleanupIssues.add(pt.getIssueNumber());
        assertEquals(true, client.hasIssue(pt));
        Phenotype pt2 = new Phenotype();
        pt2.setName(pt.getName());
        /* We need to allow time for the new issue to be indexed, otherwise if we request
         * it really quickly it won't come back.
         * This was a horrible thing to debug as you might guess */
        Thread.sleep(3000);
        assertTrue(client.hasIssue(pt2));
    }

    /**
     * Test we can't create an issue twice.
     */
    @Test
    public void testNoIssueRecreation() throws IOException
    {
        client.openIssue(pt);
        cleanupIssues.add(pt.getIssueNumber());
        try {
            client.openIssue(pt);
            fail("Did not fail on issue re-open");
        } catch (IllegalArgumentException e) {

        }
    }

    /**
     * Test that the status is properly updated.
     */
    @Test
    public void testStatus() throws IOException
    {
        client.openIssue(pt);
        assertEquals(Phenotype.Status.SUBMITTED, client.getStatus(pt));
        closeIssue(pt.getIssueNumber());
        assertEquals(Phenotype.Status.ACCEPTED, client.getStatus(pt));
    }
}
